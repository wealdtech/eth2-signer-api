// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dkg.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PrepareRequest struct {
	// account is the name of the account.
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// threshold is the number of participants required to generate a valid signature.
	Threshold uint32 `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// participants contains the endpoints of all participants.
	Participants         []*Endpoint `protobuf:"bytes,3,rep,name=participants,proto3" json:"participants,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PrepareRequest) Reset()         { *m = PrepareRequest{} }
func (m *PrepareRequest) String() string { return proto.CompactTextString(m) }
func (*PrepareRequest) ProtoMessage()    {}
func (*PrepareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_584d508ed20653c0, []int{0}
}

func (m *PrepareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareRequest.Unmarshal(m, b)
}
func (m *PrepareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareRequest.Marshal(b, m, deterministic)
}
func (m *PrepareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareRequest.Merge(m, src)
}
func (m *PrepareRequest) XXX_Size() int {
	return xxx_messageInfo_PrepareRequest.Size(m)
}
func (m *PrepareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareRequest proto.InternalMessageInfo

func (m *PrepareRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *PrepareRequest) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *PrepareRequest) GetParticipants() []*Endpoint {
	if m != nil {
		return m.Participants
	}
	return nil
}

type ExecuteRequest struct {
	// account is the name of the account.
	Account              string   `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteRequest) Reset()         { *m = ExecuteRequest{} }
func (m *ExecuteRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteRequest) ProtoMessage()    {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_584d508ed20653c0, []int{1}
}

func (m *ExecuteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteRequest.Unmarshal(m, b)
}
func (m *ExecuteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteRequest.Marshal(b, m, deterministic)
}
func (m *ExecuteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteRequest.Merge(m, src)
}
func (m *ExecuteRequest) XXX_Size() int {
	return xxx_messageInfo_ExecuteRequest.Size(m)
}
func (m *ExecuteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteRequest proto.InternalMessageInfo

func (m *ExecuteRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type CommitRequest struct {
	// account is the name of the account.
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// confirmation data is data used to generate the confirmation signature.
	ConfirmationData     []byte   `protobuf:"bytes,2,opt,name=confirmation_data,json=confirmationData,proto3" json:"confirmation_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitRequest) Reset()         { *m = CommitRequest{} }
func (m *CommitRequest) String() string { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()    {}
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_584d508ed20653c0, []int{2}
}

func (m *CommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitRequest.Unmarshal(m, b)
}
func (m *CommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitRequest.Marshal(b, m, deterministic)
}
func (m *CommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitRequest.Merge(m, src)
}
func (m *CommitRequest) XXX_Size() int {
	return xxx_messageInfo_CommitRequest.Size(m)
}
func (m *CommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitRequest proto.InternalMessageInfo

func (m *CommitRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *CommitRequest) GetConfirmationData() []byte {
	if m != nil {
		return m.ConfirmationData
	}
	return nil
}

type CommitResponse struct {
	// public_key is the key generated by the process.
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// confirmation_signature is the signature generated by the individual secret key.
	ConfirmationSignature []byte   `protobuf:"bytes,2,opt,name=confirmation_signature,json=confirmationSignature,proto3" json:"confirmation_signature,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *CommitResponse) Reset()         { *m = CommitResponse{} }
func (m *CommitResponse) String() string { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()    {}
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_584d508ed20653c0, []int{3}
}

func (m *CommitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitResponse.Unmarshal(m, b)
}
func (m *CommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitResponse.Marshal(b, m, deterministic)
}
func (m *CommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitResponse.Merge(m, src)
}
func (m *CommitResponse) XXX_Size() int {
	return xxx_messageInfo_CommitResponse.Size(m)
}
func (m *CommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitResponse proto.InternalMessageInfo

func (m *CommitResponse) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *CommitResponse) GetConfirmationSignature() []byte {
	if m != nil {
		return m.ConfirmationSignature
	}
	return nil
}

type AbortRequest struct {
	// account is the name of the account.
	Account              string   `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AbortRequest) Reset()         { *m = AbortRequest{} }
func (m *AbortRequest) String() string { return proto.CompactTextString(m) }
func (*AbortRequest) ProtoMessage()    {}
func (*AbortRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_584d508ed20653c0, []int{4}
}

func (m *AbortRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AbortRequest.Unmarshal(m, b)
}
func (m *AbortRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AbortRequest.Marshal(b, m, deterministic)
}
func (m *AbortRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbortRequest.Merge(m, src)
}
func (m *AbortRequest) XXX_Size() int {
	return xxx_messageInfo_AbortRequest.Size(m)
}
func (m *AbortRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AbortRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AbortRequest proto.InternalMessageInfo

func (m *AbortRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

// ContributeRequest is sent by each part to all other parties with a contribution.
type ContributeRequest struct {
	Account              string   `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Secret               []byte   `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	VerificationVector   [][]byte `protobuf:"bytes,3,rep,name=verification_vector,json=verificationVector,proto3" json:"verification_vector,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContributeRequest) Reset()         { *m = ContributeRequest{} }
func (m *ContributeRequest) String() string { return proto.CompactTextString(m) }
func (*ContributeRequest) ProtoMessage()    {}
func (*ContributeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_584d508ed20653c0, []int{5}
}

func (m *ContributeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContributeRequest.Unmarshal(m, b)
}
func (m *ContributeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContributeRequest.Marshal(b, m, deterministic)
}
func (m *ContributeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContributeRequest.Merge(m, src)
}
func (m *ContributeRequest) XXX_Size() int {
	return xxx_messageInfo_ContributeRequest.Size(m)
}
func (m *ContributeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContributeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContributeRequest proto.InternalMessageInfo

func (m *ContributeRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *ContributeRequest) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *ContributeRequest) GetVerificationVector() [][]byte {
	if m != nil {
		return m.VerificationVector
	}
	return nil
}

// ContributeResponse receives the contribution from a participant.
type ContributeResponse struct {
	Secret               []byte   `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	VerificationVector   [][]byte `protobuf:"bytes,2,rep,name=verification_vector,json=verificationVector,proto3" json:"verification_vector,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContributeResponse) Reset()         { *m = ContributeResponse{} }
func (m *ContributeResponse) String() string { return proto.CompactTextString(m) }
func (*ContributeResponse) ProtoMessage()    {}
func (*ContributeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_584d508ed20653c0, []int{6}
}

func (m *ContributeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContributeResponse.Unmarshal(m, b)
}
func (m *ContributeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContributeResponse.Marshal(b, m, deterministic)
}
func (m *ContributeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContributeResponse.Merge(m, src)
}
func (m *ContributeResponse) XXX_Size() int {
	return xxx_messageInfo_ContributeResponse.Size(m)
}
func (m *ContributeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ContributeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ContributeResponse proto.InternalMessageInfo

func (m *ContributeResponse) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *ContributeResponse) GetVerificationVector() [][]byte {
	if m != nil {
		return m.VerificationVector
	}
	return nil
}

func init() {
	proto.RegisterType((*PrepareRequest)(nil), "v1.PrepareRequest")
	proto.RegisterType((*ExecuteRequest)(nil), "v1.ExecuteRequest")
	proto.RegisterType((*CommitRequest)(nil), "v1.CommitRequest")
	proto.RegisterType((*CommitResponse)(nil), "v1.CommitResponse")
	proto.RegisterType((*AbortRequest)(nil), "v1.AbortRequest")
	proto.RegisterType((*ContributeRequest)(nil), "v1.ContributeRequest")
	proto.RegisterType((*ContributeResponse)(nil), "v1.ContributeResponse")
}

func init() {
	proto.RegisterFile("dkg.proto", fileDescriptor_584d508ed20653c0)
}

var fileDescriptor_584d508ed20653c0 = []byte{
	// 516 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x25, 0xa9, 0x48, 0xc9, 0xe0, 0x44, 0xcd, 0xa2, 0x46, 0x51, 0xf8, 0x50, 0xe5, 0x53, 0x54,
	0x54, 0x9b, 0xa4, 0x42, 0x9c, 0x38, 0xd0, 0x36, 0xe2, 0xd0, 0x4b, 0xe4, 0x4a, 0x3d, 0x20, 0x50,
	0x65, 0x6f, 0x26, 0xf6, 0xaa, 0xb1, 0xd7, 0xac, 0xd7, 0xa6, 0xe1, 0xc7, 0xf0, 0x03, 0xf8, 0x29,
	0xfc, 0x2a, 0xd6, 0x5e, 0x9b, 0xd8, 0x95, 0x68, 0x7a, 0x9c, 0x37, 0xfb, 0xde, 0x9b, 0x9d, 0x79,
	0xd0, 0x5d, 0xde, 0xfa, 0x56, 0x2c, 0xb8, 0xe4, 0xa4, 0x9d, 0x4d, 0xc7, 0x2f, 0x7d, 0xce, 0xfd,
	0x35, 0xda, 0x05, 0xe2, 0xa5, 0x2b, 0x1b, 0xc3, 0x58, 0x6e, 0xf4, 0x83, 0x71, 0x1f, 0xa3, 0x65,
	0xcc, 0x59, 0x24, 0x75, 0x6d, 0xfe, 0x84, 0xfe, 0x42, 0x60, 0xec, 0x0a, 0x74, 0xf0, 0x7b, 0x8a,
	0x89, 0x24, 0x23, 0xd8, 0x77, 0x29, 0xe5, 0x69, 0x24, 0x47, 0xad, 0xa3, 0xd6, 0xa4, 0xeb, 0x54,
	0x25, 0x79, 0x05, 0x5d, 0x19, 0x08, 0x4c, 0x02, 0xbe, 0x5e, 0x8e, 0xda, 0xaa, 0xd7, 0x73, 0xb6,
	0x00, 0x79, 0x07, 0x86, 0x92, 0x91, 0x8c, 0xb2, 0xd8, 0x8d, 0x64, 0x32, 0xda, 0x3b, 0xda, 0x9b,
	0x3c, 0x9f, 0x19, 0x56, 0x36, 0xb5, 0xe6, 0xa5, 0xa7, 0xd3, 0x78, 0x61, 0x1e, 0x43, 0x7f, 0x7e,
	0x87, 0x34, 0x95, 0xbb, 0xbd, 0xcd, 0x6b, 0xe8, 0x9d, 0xf3, 0x30, 0x64, 0x72, 0xf7, 0x98, 0x6f,
	0x61, 0x40, 0x79, 0xb4, 0x62, 0x22, 0x74, 0x25, 0xe3, 0xd1, 0xcd, 0xd2, 0x95, 0x6e, 0x31, 0xae,
	0xe1, 0x1c, 0xd4, 0x1b, 0x17, 0x0a, 0x37, 0x57, 0xd0, 0xaf, 0x74, 0x93, 0x98, 0x47, 0x09, 0x92,
	0xd7, 0x00, 0x71, 0xea, 0xad, 0x19, 0xbd, 0xb9, 0xc5, 0x4d, 0xa1, 0x6d, 0x38, 0x5d, 0x8d, 0x5c,
	0xe2, 0x86, 0xbc, 0x87, 0x61, 0x43, 0x3d, 0x61, 0x7e, 0xe4, 0xca, 0x54, 0x60, 0x69, 0x71, 0x58,
	0xef, 0x5e, 0x55, 0x4d, 0x73, 0x02, 0xc6, 0x27, 0x8f, 0x8b, 0xdd, 0xe3, 0x9b, 0x19, 0x0c, 0xce,
	0x79, 0x24, 0x05, 0xf3, 0x1e, 0xb3, 0x18, 0x32, 0x84, 0x4e, 0x82, 0x54, 0xa0, 0x2c, 0xfd, 0xcb,
	0x8a, 0xd8, 0xf0, 0x22, 0x43, 0xc1, 0x56, 0x8c, 0xea, 0x39, 0x33, 0xa4, 0x92, 0x8b, 0xe2, 0x2a,
	0x86, 0x43, 0xea, 0xad, 0xeb, 0xa2, 0x63, 0x7e, 0x03, 0x52, 0xf7, 0x2d, 0xb7, 0xb1, 0x95, 0x6f,
	0x3d, 0x46, 0xbe, 0xfd, 0x3f, 0xf9, 0xd9, 0xaf, 0x36, 0xec, 0x5d, 0x5c, 0x7e, 0x26, 0x1f, 0x60,
	0xbf, 0x0c, 0x1c, 0x21, 0x79, 0x36, 0x9a, 0xe9, 0x1b, 0x0f, 0x2d, 0x9d, 0x5e, 0xab, 0x4a, 0xaf,
	0x35, 0xcf, 0xd3, 0x6b, 0x3e, 0xc9, 0x89, 0x65, 0x5a, 0x34, 0xb1, 0x19, 0x9d, 0x07, 0x88, 0x53,
	0xe8, 0xe8, 0x13, 0x93, 0x41, 0xce, 0x6b, 0xc4, 0x68, 0x4c, 0xea, 0x90, 0xfe, 0xb3, 0xa2, 0x9c,
	0xc2, 0xd3, 0xe2, 0x5a, 0xe4, 0x20, 0x6f, 0xd7, 0x0f, 0xf7, 0x80, 0xcf, 0x47, 0x80, 0xed, 0x02,
	0xc9, 0xa1, 0x16, 0xbe, 0x77, 0x48, 0x45, 0xbf, 0x07, 0x57, 0x9e, 0x67, 0x77, 0xf0, 0x86, 0xf2,
	0xd0, 0xfa, 0x81, 0xee, 0x7a, 0x29, 0x91, 0x06, 0x16, 0xca, 0x60, 0x96, 0xa7, 0x0b, 0x85, 0x1b,
	0x33, 0x45, 0x3b, 0x7b, 0xa6, 0xf6, 0xb7, 0xc8, 0x5d, 0x17, 0xad, 0x2f, 0xc7, 0x3e, 0x93, 0x41,
	0xea, 0x59, 0x8a, 0x62, 0xff, 0xa3, 0xd8, 0x39, 0xe5, 0x44, 0x73, 0x4e, 0x14, 0xc9, 0x8e, 0x3d,
	0x3b, 0x9b, 0xfe, 0x6e, 0xf7, 0xe6, 0x0a, 0xbf, 0x2a, 0x60, 0xa5, 0xf3, 0xa7, 0x5e, 0x7f, 0xcd,
	0xa6, 0x5e, 0xa7, 0xf8, 0xca, 0xe9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbd, 0xec, 0x56, 0xee,
	0x48, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DKGClient is the client API for DKG service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DKGClient interface {
	Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Contribute(ctx context.Context, in *ContributeRequest, opts ...grpc.CallOption) (*ContributeResponse, error)
}

type dKGClient struct {
	cc grpc.ClientConnInterface
}

func NewDKGClient(cc grpc.ClientConnInterface) DKGClient {
	return &dKGClient{cc}
}

func (c *dKGClient) Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.DKG/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.DKG/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/v1.DKG/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGClient) Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.DKG/Abort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGClient) Contribute(ctx context.Context, in *ContributeRequest, opts ...grpc.CallOption) (*ContributeResponse, error) {
	out := new(ContributeResponse)
	err := c.cc.Invoke(ctx, "/v1.DKG/Contribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DKGServer is the server API for DKG service.
type DKGServer interface {
	Prepare(context.Context, *PrepareRequest) (*empty.Empty, error)
	Execute(context.Context, *ExecuteRequest) (*empty.Empty, error)
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	Abort(context.Context, *AbortRequest) (*empty.Empty, error)
	Contribute(context.Context, *ContributeRequest) (*ContributeResponse, error)
}

// UnimplementedDKGServer can be embedded to have forward compatible implementations.
type UnimplementedDKGServer struct {
}

func (*UnimplementedDKGServer) Prepare(ctx context.Context, req *PrepareRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (*UnimplementedDKGServer) Execute(ctx context.Context, req *ExecuteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (*UnimplementedDKGServer) Commit(ctx context.Context, req *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (*UnimplementedDKGServer) Abort(ctx context.Context, req *AbortRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (*UnimplementedDKGServer) Contribute(ctx context.Context, req *ContributeRequest) (*ContributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Contribute not implemented")
}

func RegisterDKGServer(s *grpc.Server, srv DKGServer) {
	s.RegisterService(&_DKG_serviceDesc, srv)
}

func _DKG_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DKG/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGServer).Prepare(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKG_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DKG/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKG_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DKG/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKG_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DKG/Abort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGServer).Abort(ctx, req.(*AbortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKG_Contribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGServer).Contribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DKG/Contribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGServer).Contribute(ctx, req.(*ContributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DKG_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.DKG",
	HandlerType: (*DKGServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _DKG_Prepare_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _DKG_Execute_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _DKG_Commit_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _DKG_Abort_Handler,
		},
		{
			MethodName: "Contribute",
			Handler:    _DKG_Contribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dkg.proto",
}
