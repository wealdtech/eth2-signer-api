// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DKGClient is the client API for DKG service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DKGClient interface {
	Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Contribute(ctx context.Context, in *ContributeRequest, opts ...grpc.CallOption) (*ContributeResponse, error)
}

type dKGClient struct {
	cc grpc.ClientConnInterface
}

func NewDKGClient(cc grpc.ClientConnInterface) DKGClient {
	return &dKGClient{cc}
}

func (c *dKGClient) Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.DKG/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.DKG/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/v1.DKG/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGClient) Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.DKG/Abort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGClient) Contribute(ctx context.Context, in *ContributeRequest, opts ...grpc.CallOption) (*ContributeResponse, error) {
	out := new(ContributeResponse)
	err := c.cc.Invoke(ctx, "/v1.DKG/Contribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DKGServer is the server API for DKG service.
// All implementations must embed UnimplementedDKGServer
// for forward compatibility
type DKGServer interface {
	Prepare(context.Context, *PrepareRequest) (*empty.Empty, error)
	Execute(context.Context, *ExecuteRequest) (*empty.Empty, error)
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	Abort(context.Context, *AbortRequest) (*empty.Empty, error)
	Contribute(context.Context, *ContributeRequest) (*ContributeResponse, error)
	mustEmbedUnimplementedDKGServer()
}

// UnimplementedDKGServer must be embedded to have forward compatible implementations.
type UnimplementedDKGServer struct {
}

func (UnimplementedDKGServer) Prepare(context.Context, *PrepareRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedDKGServer) Execute(context.Context, *ExecuteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedDKGServer) Commit(context.Context, *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedDKGServer) Abort(context.Context, *AbortRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (UnimplementedDKGServer) Contribute(context.Context, *ContributeRequest) (*ContributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Contribute not implemented")
}
func (UnimplementedDKGServer) mustEmbedUnimplementedDKGServer() {}

// UnsafeDKGServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DKGServer will
// result in compilation errors.
type UnsafeDKGServer interface {
	mustEmbedUnimplementedDKGServer()
}

func RegisterDKGServer(s grpc.ServiceRegistrar, srv DKGServer) {
	s.RegisterService(&DKG_ServiceDesc, srv)
}

func _DKG_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DKG/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGServer).Prepare(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKG_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DKG/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKG_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DKG/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKG_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DKG/Abort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGServer).Abort(ctx, req.(*AbortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKG_Contribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGServer).Contribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DKG/Contribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGServer).Contribute(ctx, req.(*ContributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DKG_ServiceDesc is the grpc.ServiceDesc for DKG service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DKG_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.DKG",
	HandlerType: (*DKGServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _DKG_Prepare_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _DKG_Execute_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _DKG_Commit_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _DKG_Abort_Handler,
		},
		{
			MethodName: "Contribute",
			Handler:    _DKG_Contribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dkg.proto",
}
