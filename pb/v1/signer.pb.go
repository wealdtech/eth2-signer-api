// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: signer.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*SignRequest_PublicKey
	//	*SignRequest_Account
	Id     isSignRequest_Id `protobuf_oneof:"id"`
	Data   []byte           `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Domain []byte           `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *SignRequest) Reset() {
	*x = SignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRequest) ProtoMessage() {}

func (x *SignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_signer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRequest.ProtoReflect.Descriptor instead.
func (*SignRequest) Descriptor() ([]byte, []int) {
	return file_signer_proto_rawDescGZIP(), []int{0}
}

func (m *SignRequest) GetId() isSignRequest_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *SignRequest) GetPublicKey() []byte {
	if x, ok := x.GetId().(*SignRequest_PublicKey); ok {
		return x.PublicKey
	}
	return nil
}

func (x *SignRequest) GetAccount() string {
	if x, ok := x.GetId().(*SignRequest_Account); ok {
		return x.Account
	}
	return ""
}

func (x *SignRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SignRequest) GetDomain() []byte {
	if x != nil {
		return x.Domain
	}
	return nil
}

type isSignRequest_Id interface {
	isSignRequest_Id()
}

type SignRequest_PublicKey struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3,oneof"`
}

type SignRequest_Account struct {
	Account string `protobuf:"bytes,2,opt,name=account,proto3,oneof"`
}

func (*SignRequest_PublicKey) isSignRequest_Id() {}

func (*SignRequest_Account) isSignRequest_Id() {}

type MultisignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*SignRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *MultisignRequest) Reset() {
	*x = MultisignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultisignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultisignRequest) ProtoMessage() {}

func (x *MultisignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_signer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultisignRequest.ProtoReflect.Descriptor instead.
func (*MultisignRequest) Descriptor() ([]byte, []int) {
	return file_signer_proto_rawDescGZIP(), []int{1}
}

func (x *MultisignRequest) GetRequests() []*SignRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type SignBeaconAttestationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*SignBeaconAttestationRequest_PublicKey
	//	*SignBeaconAttestationRequest_Account
	Id     isSignBeaconAttestationRequest_Id `protobuf_oneof:"id"`
	Domain []byte                            `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Data   *AttestationData                  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SignBeaconAttestationRequest) Reset() {
	*x = SignBeaconAttestationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignBeaconAttestationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignBeaconAttestationRequest) ProtoMessage() {}

func (x *SignBeaconAttestationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_signer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignBeaconAttestationRequest.ProtoReflect.Descriptor instead.
func (*SignBeaconAttestationRequest) Descriptor() ([]byte, []int) {
	return file_signer_proto_rawDescGZIP(), []int{2}
}

func (m *SignBeaconAttestationRequest) GetId() isSignBeaconAttestationRequest_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *SignBeaconAttestationRequest) GetPublicKey() []byte {
	if x, ok := x.GetId().(*SignBeaconAttestationRequest_PublicKey); ok {
		return x.PublicKey
	}
	return nil
}

func (x *SignBeaconAttestationRequest) GetAccount() string {
	if x, ok := x.GetId().(*SignBeaconAttestationRequest_Account); ok {
		return x.Account
	}
	return ""
}

func (x *SignBeaconAttestationRequest) GetDomain() []byte {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *SignBeaconAttestationRequest) GetData() *AttestationData {
	if x != nil {
		return x.Data
	}
	return nil
}

type isSignBeaconAttestationRequest_Id interface {
	isSignBeaconAttestationRequest_Id()
}

type SignBeaconAttestationRequest_PublicKey struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3,oneof"`
}

type SignBeaconAttestationRequest_Account struct {
	Account string `protobuf:"bytes,2,opt,name=account,proto3,oneof"`
}

func (*SignBeaconAttestationRequest_PublicKey) isSignBeaconAttestationRequest_Id() {}

func (*SignBeaconAttestationRequest_Account) isSignBeaconAttestationRequest_Id() {}

type SignBeaconAttestationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*SignBeaconAttestationRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *SignBeaconAttestationsRequest) Reset() {
	*x = SignBeaconAttestationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignBeaconAttestationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignBeaconAttestationsRequest) ProtoMessage() {}

func (x *SignBeaconAttestationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_signer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignBeaconAttestationsRequest.ProtoReflect.Descriptor instead.
func (*SignBeaconAttestationsRequest) Descriptor() ([]byte, []int) {
	return file_signer_proto_rawDescGZIP(), []int{3}
}

func (x *SignBeaconAttestationsRequest) GetRequests() []*SignBeaconAttestationRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type SignBeaconProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*SignBeaconProposalRequest_PublicKey
	//	*SignBeaconProposalRequest_Account
	Id     isSignBeaconProposalRequest_Id `protobuf_oneof:"id"`
	Domain []byte                         `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Data   *BeaconBlockHeader             `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SignBeaconProposalRequest) Reset() {
	*x = SignBeaconProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignBeaconProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignBeaconProposalRequest) ProtoMessage() {}

func (x *SignBeaconProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_signer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignBeaconProposalRequest.ProtoReflect.Descriptor instead.
func (*SignBeaconProposalRequest) Descriptor() ([]byte, []int) {
	return file_signer_proto_rawDescGZIP(), []int{4}
}

func (m *SignBeaconProposalRequest) GetId() isSignBeaconProposalRequest_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *SignBeaconProposalRequest) GetPublicKey() []byte {
	if x, ok := x.GetId().(*SignBeaconProposalRequest_PublicKey); ok {
		return x.PublicKey
	}
	return nil
}

func (x *SignBeaconProposalRequest) GetAccount() string {
	if x, ok := x.GetId().(*SignBeaconProposalRequest_Account); ok {
		return x.Account
	}
	return ""
}

func (x *SignBeaconProposalRequest) GetDomain() []byte {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *SignBeaconProposalRequest) GetData() *BeaconBlockHeader {
	if x != nil {
		return x.Data
	}
	return nil
}

type isSignBeaconProposalRequest_Id interface {
	isSignBeaconProposalRequest_Id()
}

type SignBeaconProposalRequest_PublicKey struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3,oneof"`
}

type SignBeaconProposalRequest_Account struct {
	Account string `protobuf:"bytes,2,opt,name=account,proto3,oneof"`
}

func (*SignBeaconProposalRequest_PublicKey) isSignBeaconProposalRequest_Id() {}

func (*SignBeaconProposalRequest_Account) isSignBeaconProposalRequest_Id() {}

type SignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State     ResponseState `protobuf:"varint,1,opt,name=state,proto3,enum=v1.ResponseState" json:"state,omitempty"`
	Signature []byte        `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignResponse) Reset() {
	*x = SignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignResponse) ProtoMessage() {}

func (x *SignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_signer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignResponse.ProtoReflect.Descriptor instead.
func (*SignResponse) Descriptor() ([]byte, []int) {
	return file_signer_proto_rawDescGZIP(), []int{5}
}

func (x *SignResponse) GetState() ResponseState {
	if x != nil {
		return x.State
	}
	return ResponseState_UNKNOWN
}

func (x *SignResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type MultisignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses []*SignResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *MultisignResponse) Reset() {
	*x = MultisignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultisignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultisignResponse) ProtoMessage() {}

func (x *MultisignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_signer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultisignResponse.ProtoReflect.Descriptor instead.
func (*MultisignResponse) Descriptor() ([]byte, []int) {
	return file_signer_proto_rawDescGZIP(), []int{6}
}

func (x *MultisignResponse) GetResponses() []*SignResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

var File_signer_proto protoreflect.FileDescriptor

var file_signer_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0a, 0x65, 0x74, 0x68, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x7c, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x1a, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22,
	0x3f, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x22, 0xa2, 0x01, 0x0a, 0x1c, 0x53, 0x69, 0x67, 0x6e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0x5d, 0x0a, 0x1d, 0x53, 0x69, 0x67, 0x6e, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x19, 0x53, 0x69, 0x67, 0x6e, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x43, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x32, 0x88, 0x04, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12,
	0x42, 0x0a, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2f, 0x73,
	0x69, 0x67, 0x6e, 0x12, 0x56, 0x0a, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x6e,
	0x12, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x75, 0x0a, 0x15, 0x53,
	0x69, 0x67, 0x6e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2f, 0x73, 0x69, 0x67,
	0x6e, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x62,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x6c, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f,
	0x12, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2f, 0x73, 0x69, 0x67,
	0x6e, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42,
	0x7b, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x65, 0x61, 0x6c, 0x64, 0x74, 0x65, 0x63, 0x68,
	0x2e, 0x65, 0x74, 0x68, 0x32, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x42, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x61,
	0x6c, 0x64, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x65, 0x74, 0x68, 0x32, 0x2d, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x62, 0x2f, 0x76, 0x31, 0xaa, 0x02, 0x0d, 0x45,
	0x74, 0x68, 0x32, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0xca, 0x02, 0x0d, 0x45,
	0x74, 0x68, 0x32, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5c, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_signer_proto_rawDescOnce sync.Once
	file_signer_proto_rawDescData = file_signer_proto_rawDesc
)

func file_signer_proto_rawDescGZIP() []byte {
	file_signer_proto_rawDescOnce.Do(func() {
		file_signer_proto_rawDescData = protoimpl.X.CompressGZIP(file_signer_proto_rawDescData)
	})
	return file_signer_proto_rawDescData
}

var file_signer_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_signer_proto_goTypes = []interface{}{
	(*SignRequest)(nil),                   // 0: v1.SignRequest
	(*MultisignRequest)(nil),              // 1: v1.MultisignRequest
	(*SignBeaconAttestationRequest)(nil),  // 2: v1.SignBeaconAttestationRequest
	(*SignBeaconAttestationsRequest)(nil), // 3: v1.SignBeaconAttestationsRequest
	(*SignBeaconProposalRequest)(nil),     // 4: v1.SignBeaconProposalRequest
	(*SignResponse)(nil),                  // 5: v1.SignResponse
	(*MultisignResponse)(nil),             // 6: v1.MultisignResponse
	(*AttestationData)(nil),               // 7: v1.AttestationData
	(*BeaconBlockHeader)(nil),             // 8: v1.BeaconBlockHeader
	(ResponseState)(0),                    // 9: v1.ResponseState
}
var file_signer_proto_depIdxs = []int32{
	0,  // 0: v1.MultisignRequest.requests:type_name -> v1.SignRequest
	7,  // 1: v1.SignBeaconAttestationRequest.data:type_name -> v1.AttestationData
	2,  // 2: v1.SignBeaconAttestationsRequest.requests:type_name -> v1.SignBeaconAttestationRequest
	8,  // 3: v1.SignBeaconProposalRequest.data:type_name -> v1.BeaconBlockHeader
	9,  // 4: v1.SignResponse.state:type_name -> v1.ResponseState
	5,  // 5: v1.MultisignResponse.responses:type_name -> v1.SignResponse
	0,  // 6: v1.Signer.Sign:input_type -> v1.SignRequest
	1,  // 7: v1.Signer.Multisign:input_type -> v1.MultisignRequest
	2,  // 8: v1.Signer.SignBeaconAttestation:input_type -> v1.SignBeaconAttestationRequest
	3,  // 9: v1.Signer.SignBeaconAttestations:input_type -> v1.SignBeaconAttestationsRequest
	4,  // 10: v1.Signer.SignBeaconProposal:input_type -> v1.SignBeaconProposalRequest
	5,  // 11: v1.Signer.Sign:output_type -> v1.SignResponse
	6,  // 12: v1.Signer.Multisign:output_type -> v1.MultisignResponse
	5,  // 13: v1.Signer.SignBeaconAttestation:output_type -> v1.SignResponse
	6,  // 14: v1.Signer.SignBeaconAttestations:output_type -> v1.MultisignResponse
	5,  // 15: v1.Signer.SignBeaconProposal:output_type -> v1.SignResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_signer_proto_init() }
func file_signer_proto_init() {
	if File_signer_proto != nil {
		return
	}
	file_eth2_proto_init()
	file_responsestate_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_signer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultisignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignBeaconAttestationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignBeaconAttestationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignBeaconProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultisignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_signer_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SignRequest_PublicKey)(nil),
		(*SignRequest_Account)(nil),
	}
	file_signer_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SignBeaconAttestationRequest_PublicKey)(nil),
		(*SignBeaconAttestationRequest_Account)(nil),
	}
	file_signer_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*SignBeaconProposalRequest_PublicKey)(nil),
		(*SignBeaconProposalRequest_Account)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_signer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_signer_proto_goTypes,
		DependencyIndexes: file_signer_proto_depIdxs,
		MessageInfos:      file_signer_proto_msgTypes,
	}.Build()
	File_signer_proto = out.File
	file_signer_proto_rawDesc = nil
	file_signer_proto_goTypes = nil
	file_signer_proto_depIdxs = nil
}
