// Code generated by protoc-gen-go. DO NOT EDIT.
// source: signer.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SignState int32

const (
	// UNKNOWN occurs when no information about the state is available.
	SignState_UNKNOWN SignState = 0
	// SUCCEEDED occurs when a request to sign was successful.
	SignState_SUCCEEDED SignState = 1
	// DENIED occurs when a request to sign was denied.
	SignState_DENIED SignState = 2
	// FAILED occurs when a request to sign failed to complete.
	SignState_FAILED SignState = 3
)

var SignState_name = map[int32]string{
	0: "UNKNOWN",
	1: "SUCCEEDED",
	2: "DENIED",
	3: "FAILED",
}

var SignState_value = map[string]int32{
	"UNKNOWN":   0,
	"SUCCEEDED": 1,
	"DENIED":    2,
	"FAILED":    3,
}

func (x SignState) String() string {
	return proto.EnumName(SignState_name, int32(x))
}

func (SignState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_df2490657d73dbfd, []int{0}
}

type SignRequest struct {
	// Types that are valid to be assigned to Id:
	//	*SignRequest_PublicKey
	//	*SignRequest_Account
	Id                   isSignRequest_Id `protobuf_oneof:"id"`
	Data                 []byte           `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Domain               []byte           `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SignRequest) Reset()         { *m = SignRequest{} }
func (m *SignRequest) String() string { return proto.CompactTextString(m) }
func (*SignRequest) ProtoMessage()    {}
func (*SignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df2490657d73dbfd, []int{0}
}

func (m *SignRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignRequest.Unmarshal(m, b)
}
func (m *SignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignRequest.Marshal(b, m, deterministic)
}
func (m *SignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignRequest.Merge(m, src)
}
func (m *SignRequest) XXX_Size() int {
	return xxx_messageInfo_SignRequest.Size(m)
}
func (m *SignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignRequest proto.InternalMessageInfo

type isSignRequest_Id interface {
	isSignRequest_Id()
}

type SignRequest_PublicKey struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3,oneof"`
}

type SignRequest_Account struct {
	Account string `protobuf:"bytes,2,opt,name=account,proto3,oneof"`
}

func (*SignRequest_PublicKey) isSignRequest_Id() {}

func (*SignRequest_Account) isSignRequest_Id() {}

func (m *SignRequest) GetId() isSignRequest_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SignRequest) GetPublicKey() []byte {
	if x, ok := m.GetId().(*SignRequest_PublicKey); ok {
		return x.PublicKey
	}
	return nil
}

func (m *SignRequest) GetAccount() string {
	if x, ok := m.GetId().(*SignRequest_Account); ok {
		return x.Account
	}
	return ""
}

func (m *SignRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SignRequest) GetDomain() []byte {
	if m != nil {
		return m.Domain
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SignRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SignRequest_PublicKey)(nil),
		(*SignRequest_Account)(nil),
	}
}

type SignBeaconAttestationRequest struct {
	// Types that are valid to be assigned to Id:
	//	*SignBeaconAttestationRequest_PublicKey
	//	*SignBeaconAttestationRequest_Account
	Id                   isSignBeaconAttestationRequest_Id `protobuf_oneof:"id"`
	Domain               []byte                            `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Data                 *AttestationData                  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *SignBeaconAttestationRequest) Reset()         { *m = SignBeaconAttestationRequest{} }
func (m *SignBeaconAttestationRequest) String() string { return proto.CompactTextString(m) }
func (*SignBeaconAttestationRequest) ProtoMessage()    {}
func (*SignBeaconAttestationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df2490657d73dbfd, []int{1}
}

func (m *SignBeaconAttestationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignBeaconAttestationRequest.Unmarshal(m, b)
}
func (m *SignBeaconAttestationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignBeaconAttestationRequest.Marshal(b, m, deterministic)
}
func (m *SignBeaconAttestationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignBeaconAttestationRequest.Merge(m, src)
}
func (m *SignBeaconAttestationRequest) XXX_Size() int {
	return xxx_messageInfo_SignBeaconAttestationRequest.Size(m)
}
func (m *SignBeaconAttestationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignBeaconAttestationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignBeaconAttestationRequest proto.InternalMessageInfo

type isSignBeaconAttestationRequest_Id interface {
	isSignBeaconAttestationRequest_Id()
}

type SignBeaconAttestationRequest_PublicKey struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3,oneof"`
}

type SignBeaconAttestationRequest_Account struct {
	Account string `protobuf:"bytes,2,opt,name=account,proto3,oneof"`
}

func (*SignBeaconAttestationRequest_PublicKey) isSignBeaconAttestationRequest_Id() {}

func (*SignBeaconAttestationRequest_Account) isSignBeaconAttestationRequest_Id() {}

func (m *SignBeaconAttestationRequest) GetId() isSignBeaconAttestationRequest_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SignBeaconAttestationRequest) GetPublicKey() []byte {
	if x, ok := m.GetId().(*SignBeaconAttestationRequest_PublicKey); ok {
		return x.PublicKey
	}
	return nil
}

func (m *SignBeaconAttestationRequest) GetAccount() string {
	if x, ok := m.GetId().(*SignBeaconAttestationRequest_Account); ok {
		return x.Account
	}
	return ""
}

func (m *SignBeaconAttestationRequest) GetDomain() []byte {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *SignBeaconAttestationRequest) GetData() *AttestationData {
	if m != nil {
		return m.Data
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SignBeaconAttestationRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SignBeaconAttestationRequest_PublicKey)(nil),
		(*SignBeaconAttestationRequest_Account)(nil),
	}
}

type SignBeaconProposalRequest struct {
	// Types that are valid to be assigned to Id:
	//	*SignBeaconProposalRequest_PublicKey
	//	*SignBeaconProposalRequest_Account
	Id                   isSignBeaconProposalRequest_Id `protobuf_oneof:"id"`
	Domain               []byte                         `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Data                 *BeaconBlockHeader             `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *SignBeaconProposalRequest) Reset()         { *m = SignBeaconProposalRequest{} }
func (m *SignBeaconProposalRequest) String() string { return proto.CompactTextString(m) }
func (*SignBeaconProposalRequest) ProtoMessage()    {}
func (*SignBeaconProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df2490657d73dbfd, []int{2}
}

func (m *SignBeaconProposalRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignBeaconProposalRequest.Unmarshal(m, b)
}
func (m *SignBeaconProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignBeaconProposalRequest.Marshal(b, m, deterministic)
}
func (m *SignBeaconProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignBeaconProposalRequest.Merge(m, src)
}
func (m *SignBeaconProposalRequest) XXX_Size() int {
	return xxx_messageInfo_SignBeaconProposalRequest.Size(m)
}
func (m *SignBeaconProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignBeaconProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignBeaconProposalRequest proto.InternalMessageInfo

type isSignBeaconProposalRequest_Id interface {
	isSignBeaconProposalRequest_Id()
}

type SignBeaconProposalRequest_PublicKey struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3,oneof"`
}

type SignBeaconProposalRequest_Account struct {
	Account string `protobuf:"bytes,2,opt,name=account,proto3,oneof"`
}

func (*SignBeaconProposalRequest_PublicKey) isSignBeaconProposalRequest_Id() {}

func (*SignBeaconProposalRequest_Account) isSignBeaconProposalRequest_Id() {}

func (m *SignBeaconProposalRequest) GetId() isSignBeaconProposalRequest_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SignBeaconProposalRequest) GetPublicKey() []byte {
	if x, ok := m.GetId().(*SignBeaconProposalRequest_PublicKey); ok {
		return x.PublicKey
	}
	return nil
}

func (m *SignBeaconProposalRequest) GetAccount() string {
	if x, ok := m.GetId().(*SignBeaconProposalRequest_Account); ok {
		return x.Account
	}
	return ""
}

func (m *SignBeaconProposalRequest) GetDomain() []byte {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *SignBeaconProposalRequest) GetData() *BeaconBlockHeader {
	if m != nil {
		return m.Data
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SignBeaconProposalRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SignBeaconProposalRequest_PublicKey)(nil),
		(*SignBeaconProposalRequest_Account)(nil),
	}
}

type SignResponse struct {
	State                SignState `protobuf:"varint,1,opt,name=state,proto3,enum=v1.SignState" json:"state,omitempty"`
	Signature            []byte    `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SignResponse) Reset()         { *m = SignResponse{} }
func (m *SignResponse) String() string { return proto.CompactTextString(m) }
func (*SignResponse) ProtoMessage()    {}
func (*SignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df2490657d73dbfd, []int{3}
}

func (m *SignResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignResponse.Unmarshal(m, b)
}
func (m *SignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignResponse.Marshal(b, m, deterministic)
}
func (m *SignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignResponse.Merge(m, src)
}
func (m *SignResponse) XXX_Size() int {
	return xxx_messageInfo_SignResponse.Size(m)
}
func (m *SignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignResponse proto.InternalMessageInfo

func (m *SignResponse) GetState() SignState {
	if m != nil {
		return m.State
	}
	return SignState_UNKNOWN
}

func (m *SignResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterEnum("v1.SignState", SignState_name, SignState_value)
	proto.RegisterType((*SignRequest)(nil), "v1.SignRequest")
	proto.RegisterType((*SignBeaconAttestationRequest)(nil), "v1.SignBeaconAttestationRequest")
	proto.RegisterType((*SignBeaconProposalRequest)(nil), "v1.SignBeaconProposalRequest")
	proto.RegisterType((*SignResponse)(nil), "v1.SignResponse")
}

func init() { proto.RegisterFile("signer.proto", fileDescriptor_df2490657d73dbfd) }

var fileDescriptor_df2490657d73dbfd = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x93, 0xdd, 0x0e, 0xd2, 0x40,
	0x10, 0x85, 0x69, 0xa9, 0x25, 0x1d, 0x8a, 0x92, 0x31, 0x98, 0x4a, 0x30, 0x12, 0xbc, 0xf0, 0x2f,
	0x21, 0xa1, 0x3e, 0x80, 0x01, 0x5a, 0x85, 0xa0, 0x55, 0x4b, 0x88, 0x97, 0x66, 0x69, 0x37, 0xda,
	0x80, 0xdd, 0xda, 0x6e, 0x49, 0x48, 0x7c, 0x19, 0x7d, 0x1f, 0xdf, 0xc9, 0xdd, 0xb6, 0x58, 0x50,
	0xbc, 0xd3, 0xbb, 0xd9, 0x73, 0x76, 0xe7, 0x7c, 0x30, 0x53, 0x30, 0xb3, 0xe8, 0x63, 0x4c, 0xd3,
	0x71, 0x92, 0x32, 0xce, 0x50, 0x3d, 0x4c, 0xfa, 0x40, 0xf9, 0x27, 0xbb, 0x3c, 0x8f, 0xbe, 0x42,
	0x7b, 0x2d, 0x7c, 0x9f, 0x7e, 0xc9, 0x69, 0xc6, 0xf1, 0x3e, 0x40, 0x92, 0x6f, 0xf7, 0x51, 0xf0,
	0x61, 0x47, 0x8f, 0x96, 0x32, 0x54, 0x1e, 0x99, 0x8b, 0x86, 0x6f, 0x94, 0xda, 0x8a, 0x1e, 0xb1,
	0x0f, 0x2d, 0x12, 0x04, 0x2c, 0x8f, 0xb9, 0xa5, 0x0a, 0xd7, 0x10, 0xee, 0x49, 0x40, 0x04, 0x2d,
	0x24, 0x9c, 0x58, 0x4d, 0xf9, 0xcc, 0x2f, 0x6a, 0xbc, 0x03, 0x7a, 0xc8, 0x3e, 0x93, 0x28, 0xb6,
	0xb4, 0x42, 0xad, 0x4e, 0x33, 0x0d, 0xd4, 0x28, 0x1c, 0x7d, 0x57, 0x60, 0x20, 0xe3, 0x67, 0x94,
	0x04, 0x2c, 0x9e, 0x72, 0x2e, 0x18, 0x08, 0x8f, 0xd8, 0xbf, 0xe1, 0xa9, 0xb3, 0x9b, 0xe7, 0xd9,
	0xf8, 0xb0, 0xe2, 0x94, 0x44, 0x6d, 0xfb, 0xf6, 0xf8, 0x30, 0x19, 0x9f, 0x45, 0x3b, 0xc2, 0x2a,
	0xe1, 0x2b, 0xc8, 0x6f, 0x0a, 0xdc, 0xad, 0x21, 0xdf, 0xa6, 0x2c, 0x61, 0x19, 0xd9, 0xff, 0x57,
	0xc2, 0xc7, 0x17, 0x84, 0x3d, 0x49, 0x58, 0xa6, 0xcf, 0xf6, 0x2c, 0xd8, 0x2d, 0x28, 0x09, 0x69,
	0x7a, 0xc1, 0xf8, 0x0e, 0xcc, 0x72, 0x8c, 0x59, 0xc2, 0xe2, 0x8c, 0xe2, 0x03, 0xb8, 0x21, 0x7f,
	0x0e, 0x2d, 0x80, 0x6e, 0xda, 0x1d, 0xd9, 0x41, 0x5e, 0x58, 0x4b, 0xd1, 0x2f, 0x3d, 0x1c, 0x80,
	0x21, 0x77, 0x83, 0xf0, 0x3c, 0xa5, 0x05, 0x9b, 0xe9, 0xd7, 0xc2, 0x93, 0xe7, 0x60, 0xfc, 0x7a,
	0x81, 0x6d, 0x68, 0x6d, 0xbc, 0x95, 0xf7, 0xe6, 0xbd, 0xd7, 0x6d, 0x60, 0x47, 0x38, 0x9b, 0xf9,
	0xdc, 0x75, 0x1d, 0xd7, 0xe9, 0x2a, 0x08, 0xa0, 0x3b, 0xae, 0xb7, 0x14, 0xb5, 0x2a, 0xeb, 0x17,
	0xd3, 0xe5, 0x2b, 0x51, 0x37, 0xed, 0x1f, 0x0a, 0xe8, 0xeb, 0x62, 0xf7, 0xf0, 0x29, 0x68, 0xb2,
	0xc2, 0x5b, 0x27, 0x8e, 0xea, 0xdf, 0xeb, 0x77, 0x6b, 0xa1, 0x24, 0x1f, 0x35, 0xf0, 0x35, 0xf4,
	0xae, 0xee, 0x04, 0x0e, 0x4f, 0x97, 0xff, 0xb6, 0x2e, 0x57, 0xdb, 0xbd, 0x04, 0xfc, 0x73, 0x7a,
	0x78, 0xef, 0xb2, 0xd7, 0x6f, 0x53, 0xbd, 0xd6, 0x68, 0xab, 0x17, 0x5f, 0xcc, 0xb3, 0x9f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xed, 0x2c, 0xa3, 0xe5, 0x51, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SignerClient is the client API for Signer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SignerClient interface {
	Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error)
	SignBeaconAttestation(ctx context.Context, in *SignBeaconAttestationRequest, opts ...grpc.CallOption) (*SignResponse, error)
	SignBeaconProposal(ctx context.Context, in *SignBeaconProposalRequest, opts ...grpc.CallOption) (*SignResponse, error)
}

type signerClient struct {
	cc *grpc.ClientConn
}

func NewSignerClient(cc *grpc.ClientConn) SignerClient {
	return &signerClient{cc}
}

func (c *signerClient) Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error) {
	out := new(SignResponse)
	err := c.cc.Invoke(ctx, "/v1.Signer/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signerClient) SignBeaconAttestation(ctx context.Context, in *SignBeaconAttestationRequest, opts ...grpc.CallOption) (*SignResponse, error) {
	out := new(SignResponse)
	err := c.cc.Invoke(ctx, "/v1.Signer/SignBeaconAttestation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signerClient) SignBeaconProposal(ctx context.Context, in *SignBeaconProposalRequest, opts ...grpc.CallOption) (*SignResponse, error) {
	out := new(SignResponse)
	err := c.cc.Invoke(ctx, "/v1.Signer/SignBeaconProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignerServer is the server API for Signer service.
type SignerServer interface {
	Sign(context.Context, *SignRequest) (*SignResponse, error)
	SignBeaconAttestation(context.Context, *SignBeaconAttestationRequest) (*SignResponse, error)
	SignBeaconProposal(context.Context, *SignBeaconProposalRequest) (*SignResponse, error)
}

// UnimplementedSignerServer can be embedded to have forward compatible implementations.
type UnimplementedSignerServer struct {
}

func (*UnimplementedSignerServer) Sign(ctx context.Context, req *SignRequest) (*SignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (*UnimplementedSignerServer) SignBeaconAttestation(ctx context.Context, req *SignBeaconAttestationRequest) (*SignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignBeaconAttestation not implemented")
}
func (*UnimplementedSignerServer) SignBeaconProposal(ctx context.Context, req *SignBeaconProposalRequest) (*SignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignBeaconProposal not implemented")
}

func RegisterSignerServer(s *grpc.Server, srv SignerServer) {
	s.RegisterService(&_Signer_serviceDesc, srv)
}

func _Signer_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Signer/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServer).Sign(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signer_SignBeaconAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignBeaconAttestationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServer).SignBeaconAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Signer/SignBeaconAttestation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServer).SignBeaconAttestation(ctx, req.(*SignBeaconAttestationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signer_SignBeaconProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignBeaconProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServer).SignBeaconProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Signer/SignBeaconProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServer).SignBeaconProposal(ctx, req.(*SignBeaconProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Signer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Signer",
	HandlerType: (*SignerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sign",
			Handler:    _Signer_Sign_Handler,
		},
		{
			MethodName: "SignBeaconAttestation",
			Handler:    _Signer_SignBeaconAttestation_Handler,
		},
		{
			MethodName: "SignBeaconProposal",
			Handler:    _Signer_SignBeaconProposal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "signer.proto",
}
