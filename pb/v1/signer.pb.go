// Code generated by protoc-gen-go. DO NOT EDIT.
// source: signer.proto

/*
Package v1 is a generated protocol buffer package.

It is generated from these files:
	signer.proto

It has these top-level messages:
	SignRequest
	SignBeaconAttestationRequest
	SignBeaconProposalRequest
	SignResponse
*/
package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import v11 "."
import v12 "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SignRequest struct {
	// Types that are valid to be assigned to Id:
	//	*SignRequest_PublicKey
	//	*SignRequest_Account
	Id     isSignRequest_Id `protobuf_oneof:"id"`
	Data   []byte           `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Domain []byte           `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (m *SignRequest) Reset()                    { *m = SignRequest{} }
func (m *SignRequest) String() string            { return proto.CompactTextString(m) }
func (*SignRequest) ProtoMessage()               {}
func (*SignRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isSignRequest_Id interface {
	isSignRequest_Id()
}

type SignRequest_PublicKey struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3,oneof"`
}
type SignRequest_Account struct {
	Account string `protobuf:"bytes,2,opt,name=account,oneof"`
}

func (*SignRequest_PublicKey) isSignRequest_Id() {}
func (*SignRequest_Account) isSignRequest_Id()   {}

func (m *SignRequest) GetId() isSignRequest_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SignRequest) GetPublicKey() []byte {
	if x, ok := m.GetId().(*SignRequest_PublicKey); ok {
		return x.PublicKey
	}
	return nil
}

func (m *SignRequest) GetAccount() string {
	if x, ok := m.GetId().(*SignRequest_Account); ok {
		return x.Account
	}
	return ""
}

func (m *SignRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SignRequest) GetDomain() []byte {
	if m != nil {
		return m.Domain
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SignRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SignRequest_OneofMarshaler, _SignRequest_OneofUnmarshaler, _SignRequest_OneofSizer, []interface{}{
		(*SignRequest_PublicKey)(nil),
		(*SignRequest_Account)(nil),
	}
}

func _SignRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SignRequest)
	// id
	switch x := m.Id.(type) {
	case *SignRequest_PublicKey:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.PublicKey)
	case *SignRequest_Account:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Account)
	case nil:
	default:
		return fmt.Errorf("SignRequest.Id has unexpected type %T", x)
	}
	return nil
}

func _SignRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SignRequest)
	switch tag {
	case 1: // id.public_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Id = &SignRequest_PublicKey{x}
		return true, err
	case 2: // id.account
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Id = &SignRequest_Account{x}
		return true, err
	default:
		return false, nil
	}
}

func _SignRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SignRequest)
	// id
	switch x := m.Id.(type) {
	case *SignRequest_PublicKey:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.PublicKey)))
		n += len(x.PublicKey)
	case *SignRequest_Account:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Account)))
		n += len(x.Account)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SignBeaconAttestationRequest struct {
	// Types that are valid to be assigned to Id:
	//	*SignBeaconAttestationRequest_PublicKey
	//	*SignBeaconAttestationRequest_Account
	Id     isSignBeaconAttestationRequest_Id `protobuf_oneof:"id"`
	Domain []byte                            `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Data   *v11.AttestationData              `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *SignBeaconAttestationRequest) Reset()                    { *m = SignBeaconAttestationRequest{} }
func (m *SignBeaconAttestationRequest) String() string            { return proto.CompactTextString(m) }
func (*SignBeaconAttestationRequest) ProtoMessage()               {}
func (*SignBeaconAttestationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isSignBeaconAttestationRequest_Id interface {
	isSignBeaconAttestationRequest_Id()
}

type SignBeaconAttestationRequest_PublicKey struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3,oneof"`
}
type SignBeaconAttestationRequest_Account struct {
	Account string `protobuf:"bytes,2,opt,name=account,oneof"`
}

func (*SignBeaconAttestationRequest_PublicKey) isSignBeaconAttestationRequest_Id() {}
func (*SignBeaconAttestationRequest_Account) isSignBeaconAttestationRequest_Id()   {}

func (m *SignBeaconAttestationRequest) GetId() isSignBeaconAttestationRequest_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SignBeaconAttestationRequest) GetPublicKey() []byte {
	if x, ok := m.GetId().(*SignBeaconAttestationRequest_PublicKey); ok {
		return x.PublicKey
	}
	return nil
}

func (m *SignBeaconAttestationRequest) GetAccount() string {
	if x, ok := m.GetId().(*SignBeaconAttestationRequest_Account); ok {
		return x.Account
	}
	return ""
}

func (m *SignBeaconAttestationRequest) GetDomain() []byte {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *SignBeaconAttestationRequest) GetData() *v11.AttestationData {
	if m != nil {
		return m.Data
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SignBeaconAttestationRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SignBeaconAttestationRequest_OneofMarshaler, _SignBeaconAttestationRequest_OneofUnmarshaler, _SignBeaconAttestationRequest_OneofSizer, []interface{}{
		(*SignBeaconAttestationRequest_PublicKey)(nil),
		(*SignBeaconAttestationRequest_Account)(nil),
	}
}

func _SignBeaconAttestationRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SignBeaconAttestationRequest)
	// id
	switch x := m.Id.(type) {
	case *SignBeaconAttestationRequest_PublicKey:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.PublicKey)
	case *SignBeaconAttestationRequest_Account:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Account)
	case nil:
	default:
		return fmt.Errorf("SignBeaconAttestationRequest.Id has unexpected type %T", x)
	}
	return nil
}

func _SignBeaconAttestationRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SignBeaconAttestationRequest)
	switch tag {
	case 1: // id.public_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Id = &SignBeaconAttestationRequest_PublicKey{x}
		return true, err
	case 2: // id.account
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Id = &SignBeaconAttestationRequest_Account{x}
		return true, err
	default:
		return false, nil
	}
}

func _SignBeaconAttestationRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SignBeaconAttestationRequest)
	// id
	switch x := m.Id.(type) {
	case *SignBeaconAttestationRequest_PublicKey:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.PublicKey)))
		n += len(x.PublicKey)
	case *SignBeaconAttestationRequest_Account:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Account)))
		n += len(x.Account)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SignBeaconProposalRequest struct {
	// Types that are valid to be assigned to Id:
	//	*SignBeaconProposalRequest_PublicKey
	//	*SignBeaconProposalRequest_Account
	Id     isSignBeaconProposalRequest_Id `protobuf_oneof:"id"`
	Domain []byte                         `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Data   *v11.BeaconBlockHeader         `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *SignBeaconProposalRequest) Reset()                    { *m = SignBeaconProposalRequest{} }
func (m *SignBeaconProposalRequest) String() string            { return proto.CompactTextString(m) }
func (*SignBeaconProposalRequest) ProtoMessage()               {}
func (*SignBeaconProposalRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isSignBeaconProposalRequest_Id interface {
	isSignBeaconProposalRequest_Id()
}

type SignBeaconProposalRequest_PublicKey struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3,oneof"`
}
type SignBeaconProposalRequest_Account struct {
	Account string `protobuf:"bytes,2,opt,name=account,oneof"`
}

func (*SignBeaconProposalRequest_PublicKey) isSignBeaconProposalRequest_Id() {}
func (*SignBeaconProposalRequest_Account) isSignBeaconProposalRequest_Id()   {}

func (m *SignBeaconProposalRequest) GetId() isSignBeaconProposalRequest_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SignBeaconProposalRequest) GetPublicKey() []byte {
	if x, ok := m.GetId().(*SignBeaconProposalRequest_PublicKey); ok {
		return x.PublicKey
	}
	return nil
}

func (m *SignBeaconProposalRequest) GetAccount() string {
	if x, ok := m.GetId().(*SignBeaconProposalRequest_Account); ok {
		return x.Account
	}
	return ""
}

func (m *SignBeaconProposalRequest) GetDomain() []byte {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *SignBeaconProposalRequest) GetData() *v11.BeaconBlockHeader {
	if m != nil {
		return m.Data
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SignBeaconProposalRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SignBeaconProposalRequest_OneofMarshaler, _SignBeaconProposalRequest_OneofUnmarshaler, _SignBeaconProposalRequest_OneofSizer, []interface{}{
		(*SignBeaconProposalRequest_PublicKey)(nil),
		(*SignBeaconProposalRequest_Account)(nil),
	}
}

func _SignBeaconProposalRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SignBeaconProposalRequest)
	// id
	switch x := m.Id.(type) {
	case *SignBeaconProposalRequest_PublicKey:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.PublicKey)
	case *SignBeaconProposalRequest_Account:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Account)
	case nil:
	default:
		return fmt.Errorf("SignBeaconProposalRequest.Id has unexpected type %T", x)
	}
	return nil
}

func _SignBeaconProposalRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SignBeaconProposalRequest)
	switch tag {
	case 1: // id.public_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Id = &SignBeaconProposalRequest_PublicKey{x}
		return true, err
	case 2: // id.account
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Id = &SignBeaconProposalRequest_Account{x}
		return true, err
	default:
		return false, nil
	}
}

func _SignBeaconProposalRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SignBeaconProposalRequest)
	// id
	switch x := m.Id.(type) {
	case *SignBeaconProposalRequest_PublicKey:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.PublicKey)))
		n += len(x.PublicKey)
	case *SignBeaconProposalRequest_Account:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Account)))
		n += len(x.Account)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SignResponse struct {
	State     v12.ResponseState `protobuf:"varint,1,opt,name=state,enum=v1.ResponseState" json:"state,omitempty"`
	Signature []byte            `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SignResponse) Reset()                    { *m = SignResponse{} }
func (m *SignResponse) String() string            { return proto.CompactTextString(m) }
func (*SignResponse) ProtoMessage()               {}
func (*SignResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SignResponse) GetState() v12.ResponseState {
	if m != nil {
		return m.State
	}
	return v12.ResponseState_UNKNOWN
}

func (m *SignResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*SignRequest)(nil), "v1.SignRequest")
	proto.RegisterType((*SignBeaconAttestationRequest)(nil), "v1.SignBeaconAttestationRequest")
	proto.RegisterType((*SignBeaconProposalRequest)(nil), "v1.SignBeaconProposalRequest")
	proto.RegisterType((*SignResponse)(nil), "v1.SignResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Signer service

type SignerClient interface {
	Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error)
	SignBeaconAttestation(ctx context.Context, in *SignBeaconAttestationRequest, opts ...grpc.CallOption) (*SignResponse, error)
	SignBeaconProposal(ctx context.Context, in *SignBeaconProposalRequest, opts ...grpc.CallOption) (*SignResponse, error)
}

type signerClient struct {
	cc *grpc.ClientConn
}

func NewSignerClient(cc *grpc.ClientConn) SignerClient {
	return &signerClient{cc}
}

func (c *signerClient) Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error) {
	out := new(SignResponse)
	err := grpc.Invoke(ctx, "/v1.Signer/Sign", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signerClient) SignBeaconAttestation(ctx context.Context, in *SignBeaconAttestationRequest, opts ...grpc.CallOption) (*SignResponse, error) {
	out := new(SignResponse)
	err := grpc.Invoke(ctx, "/v1.Signer/SignBeaconAttestation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signerClient) SignBeaconProposal(ctx context.Context, in *SignBeaconProposalRequest, opts ...grpc.CallOption) (*SignResponse, error) {
	out := new(SignResponse)
	err := grpc.Invoke(ctx, "/v1.Signer/SignBeaconProposal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Signer service

type SignerServer interface {
	Sign(context.Context, *SignRequest) (*SignResponse, error)
	SignBeaconAttestation(context.Context, *SignBeaconAttestationRequest) (*SignResponse, error)
	SignBeaconProposal(context.Context, *SignBeaconProposalRequest) (*SignResponse, error)
}

func RegisterSignerServer(s *grpc.Server, srv SignerServer) {
	s.RegisterService(&_Signer_serviceDesc, srv)
}

func _Signer_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Signer/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServer).Sign(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signer_SignBeaconAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignBeaconAttestationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServer).SignBeaconAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Signer/SignBeaconAttestation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServer).SignBeaconAttestation(ctx, req.(*SignBeaconAttestationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signer_SignBeaconProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignBeaconProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServer).SignBeaconProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Signer/SignBeaconProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServer).SignBeaconProposal(ctx, req.(*SignBeaconProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Signer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Signer",
	HandlerType: (*SignerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sign",
			Handler:    _Signer_Sign_Handler,
		},
		{
			MethodName: "SignBeaconAttestation",
			Handler:    _Signer_SignBeaconAttestation_Handler,
		},
		{
			MethodName: "SignBeaconProposal",
			Handler:    _Signer_SignBeaconProposal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "signer.proto",
}

func init() { proto.RegisterFile("signer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0x41, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0x6b, 0x37, 0x04, 0xe5, 0x25, 0x50, 0xfa, 0xaa, 0x42, 0x88, 0x52, 0x1a, 0x45, 0x42,
	0x0d, 0x1b, 0x47, 0x36, 0x27, 0xc0, 0x02, 0x29, 0x12, 0x0b, 0x22, 0x47, 0xec, 0x90, 0xd0, 0x8b,
	0x3d, 0x4a, 0x46, 0x75, 0x67, 0x8c, 0x3d, 0x36, 0xaa, 0xc4, 0x8a, 0x2b, 0x70, 0x02, 0x58, 0xb2,
	0xe3, 0x1a, 0x6c, 0xb9, 0x02, 0x07, 0x41, 0x33, 0xe3, 0x28, 0x4e, 0x09, 0x3b, 0xba, 0xf2, 0xcc,
	0x3f, 0x33, 0xef, 0xff, 0xe4, 0xff, 0x3d, 0xe8, 0x15, 0x7c, 0x25, 0x58, 0xee, 0x65, 0xb9, 0x54,
	0x12, 0xdd, 0xca, 0x1f, 0x0c, 0x57, 0x52, 0xae, 0x52, 0x36, 0xa5, 0x8c, 0x4f, 0x49, 0x08, 0xa9,
	0x48, 0x71, 0x29, 0x0a, 0x7b, 0x63, 0x00, 0x4c, 0xad, 0x83, 0x7a, 0x7d, 0x92, 0xb3, 0x22, 0x93,
	0xa2, 0x60, 0x85, 0x22, 0xc5, 0xac, 0x38, 0xfe, 0x04, 0xdd, 0x05, 0x5f, 0x89, 0x88, 0x7d, 0x28,
	0x59, 0xa1, 0xf0, 0x1c, 0x20, 0x2b, 0x97, 0x29, 0x8f, 0xdf, 0x5f, 0xb2, 0xeb, 0xbe, 0x33, 0x72,
	0x26, 0xbd, 0xd9, 0x41, 0xd4, 0xb1, 0xda, 0x6b, 0x76, 0x8d, 0x03, 0xb8, 0x4b, 0x71, 0x2c, 0x4b,
	0xa1, 0xfa, 0xee, 0xc8, 0x99, 0x74, 0x66, 0x07, 0xd1, 0x46, 0x40, 0x84, 0x56, 0x42, 0x8a, 0xfa,
	0x87, 0xfa, 0x59, 0x64, 0xd6, 0xf8, 0x10, 0xda, 0x89, 0xbc, 0x22, 0x2e, 0xfa, 0x2d, 0xa3, 0xd6,
	0xbb, 0xb0, 0x05, 0x2e, 0x4f, 0xc6, 0xdf, 0x1c, 0x18, 0x6a, 0xfb, 0x90, 0x51, 0x2c, 0xc5, 0x0b,
	0xa5, 0x0c, 0x1b, 0x97, 0xff, 0x87, 0x67, 0xeb, 0x7d, 0xd8, 0xf4, 0xc6, 0x8b, 0x9a, 0x53, 0x13,
	0x75, 0x83, 0x13, 0xaf, 0xf2, 0xbd, 0x86, 0xf5, 0x4b, 0x52, 0x64, 0xe1, 0x6b, 0xc8, 0xaf, 0x0e,
	0x3c, 0xde, 0x42, 0xce, 0x73, 0x99, 0xc9, 0x82, 0xd2, 0x5b, 0x25, 0x7c, 0xb6, 0x43, 0x78, 0xaa,
	0x09, 0xad, 0x7b, 0x98, 0xca, 0xf8, 0x72, 0xc6, 0x28, 0x61, 0xf9, 0x0e, 0xe3, 0x5b, 0xe8, 0xd9,
	0x18, 0x6d, 0xc2, 0x78, 0x01, 0x77, 0x4c, 0xca, 0x06, 0xe8, 0x7e, 0x70, 0xac, 0x2b, 0x6c, 0x0e,
	0x17, 0xfa, 0x20, 0xb2, 0xe7, 0x38, 0x84, 0x8e, 0x6e, 0x29, 0x52, 0x65, 0xce, 0x0c, 0x5f, 0x2f,
	0xda, 0x0a, 0xc1, 0x0f, 0x17, 0xda, 0x0b, 0xd3, 0x71, 0x18, 0x42, 0x4b, 0xaf, 0xf0, 0x48, 0x97,
	0x6a, 0xb4, 0xcc, 0xe0, 0xc1, 0x56, 0xb0, 0xf5, 0xc7, 0x8f, 0x3e, 0xff, 0xfa, 0xfd, 0xc5, 0x3d,
	0xc6, 0xa3, 0x69, 0xe5, 0x4f, 0x6d, 0xc3, 0x9a, 0x0f, 0x96, 0x70, 0xba, 0x37, 0x6d, 0x1c, 0x6d,
	0x6a, 0xfc, 0xab, 0x11, 0xf6, 0xb8, 0x4c, 0x8c, 0xcb, 0x18, 0x47, 0x37, 0x5c, 0x96, 0xa6, 0x04,
	0x35, 0xaa, 0xa7, 0x80, 0x7f, 0xe7, 0x87, 0x67, 0xbb, 0x9e, 0x37, 0x72, 0xdd, 0x63, 0xf8, 0xd4,
	0x18, 0x9e, 0xe3, 0xd9, 0x5e, 0xc3, 0xac, 0x7e, 0x1f, 0xbe, 0x81, 0x27, 0xb1, 0xbc, 0xf2, 0x3e,
	0x32, 0x4a, 0x13, 0xc5, 0xe2, 0xb5, 0xa7, 0x47, 0xd0, 0x5e, 0xa7, 0x8c, 0x7b, 0x95, 0x1f, 0x76,
	0xed, 0x2f, 0x9d, 0xeb, 0x01, 0x9c, 0x3b, 0xdf, 0xdd, 0x7b, 0xaf, 0xd4, 0x3a, 0xb0, 0x9a, 0x57,
	0xf9, 0x3f, 0x9b, 0xfb, 0x77, 0x95, 0xbf, 0x6c, 0x9b, 0x49, 0x7d, 0xfe, 0x27, 0x00, 0x00, 0xff,
	0xff, 0xdf, 0x31, 0x61, 0x6d, 0xfc, 0x03, 0x00, 0x00,
}
