// Code generated by protoc-gen-go. DO NOT EDIT.
// source: walletmanager.proto

/*
Package v1 is a generated protocol buffer package.

It is generated from these files:
	walletmanager.proto

It has these top-level messages:
	UnlockWalletRequest
	LockWalletRequest
	UnlockWalletResponse
	LockWalletResponse
*/
package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import v11 "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UnlockWalletRequest struct {
	Wallet     string `protobuf:"bytes,1,opt,name=wallet" json:"wallet,omitempty"`
	Passphrase []byte `protobuf:"bytes,2,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (m *UnlockWalletRequest) Reset()                    { *m = UnlockWalletRequest{} }
func (m *UnlockWalletRequest) String() string            { return proto.CompactTextString(m) }
func (*UnlockWalletRequest) ProtoMessage()               {}
func (*UnlockWalletRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UnlockWalletRequest) GetWallet() string {
	if m != nil {
		return m.Wallet
	}
	return ""
}

func (m *UnlockWalletRequest) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

type LockWalletRequest struct {
	Wallet string `protobuf:"bytes,1,opt,name=wallet" json:"wallet,omitempty"`
}

func (m *LockWalletRequest) Reset()                    { *m = LockWalletRequest{} }
func (m *LockWalletRequest) String() string            { return proto.CompactTextString(m) }
func (*LockWalletRequest) ProtoMessage()               {}
func (*LockWalletRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LockWalletRequest) GetWallet() string {
	if m != nil {
		return m.Wallet
	}
	return ""
}

type UnlockWalletResponse struct {
	State v11.ResponseState `protobuf:"varint,1,opt,name=state,enum=v1.ResponseState" json:"state,omitempty"`
}

func (m *UnlockWalletResponse) Reset()                    { *m = UnlockWalletResponse{} }
func (m *UnlockWalletResponse) String() string            { return proto.CompactTextString(m) }
func (*UnlockWalletResponse) ProtoMessage()               {}
func (*UnlockWalletResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UnlockWalletResponse) GetState() v11.ResponseState {
	if m != nil {
		return m.State
	}
	return v11.ResponseState_UNKNOWN
}

type LockWalletResponse struct {
	State v11.ResponseState `protobuf:"varint,1,opt,name=state,enum=v1.ResponseState" json:"state,omitempty"`
}

func (m *LockWalletResponse) Reset()                    { *m = LockWalletResponse{} }
func (m *LockWalletResponse) String() string            { return proto.CompactTextString(m) }
func (*LockWalletResponse) ProtoMessage()               {}
func (*LockWalletResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LockWalletResponse) GetState() v11.ResponseState {
	if m != nil {
		return m.State
	}
	return v11.ResponseState_UNKNOWN
}

func init() {
	proto.RegisterType((*UnlockWalletRequest)(nil), "v1.UnlockWalletRequest")
	proto.RegisterType((*LockWalletRequest)(nil), "v1.LockWalletRequest")
	proto.RegisterType((*UnlockWalletResponse)(nil), "v1.UnlockWalletResponse")
	proto.RegisterType((*LockWalletResponse)(nil), "v1.LockWalletResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WalletManager service

type WalletManagerClient interface {
	Unlock(ctx context.Context, in *UnlockWalletRequest, opts ...grpc.CallOption) (*UnlockWalletResponse, error)
	Lock(ctx context.Context, in *LockWalletRequest, opts ...grpc.CallOption) (*LockWalletResponse, error)
}

type walletManagerClient struct {
	cc *grpc.ClientConn
}

func NewWalletManagerClient(cc *grpc.ClientConn) WalletManagerClient {
	return &walletManagerClient{cc}
}

func (c *walletManagerClient) Unlock(ctx context.Context, in *UnlockWalletRequest, opts ...grpc.CallOption) (*UnlockWalletResponse, error) {
	out := new(UnlockWalletResponse)
	err := grpc.Invoke(ctx, "/v1.WalletManager/Unlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletManagerClient) Lock(ctx context.Context, in *LockWalletRequest, opts ...grpc.CallOption) (*LockWalletResponse, error) {
	out := new(LockWalletResponse)
	err := grpc.Invoke(ctx, "/v1.WalletManager/Lock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WalletManager service

type WalletManagerServer interface {
	Unlock(context.Context, *UnlockWalletRequest) (*UnlockWalletResponse, error)
	Lock(context.Context, *LockWalletRequest) (*LockWalletResponse, error)
}

func RegisterWalletManagerServer(s *grpc.Server, srv WalletManagerServer) {
	s.RegisterService(&_WalletManager_serviceDesc, srv)
}

func _WalletManager_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletManagerServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.WalletManager/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletManagerServer).Unlock(ctx, req.(*UnlockWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletManager_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletManagerServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.WalletManager/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletManagerServer).Lock(ctx, req.(*LockWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalletManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.WalletManager",
	HandlerType: (*WalletManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unlock",
			Handler:    _WalletManager_Unlock_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _WalletManager_Lock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "walletmanager.proto",
}

func init() { proto.RegisterFile("walletmanager.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x49, 0xd0, 0x82, 0x83, 0x15, 0xba, 0xd5, 0x1a, 0x82, 0x94, 0x92, 0x8b, 0x05, 0x61,
	0x43, 0xe2, 0x59, 0x84, 0x82, 0xb7, 0x16, 0x4a, 0x4a, 0xf5, 0xa2, 0x87, 0xb5, 0x0e, 0x49, 0x30,
	0xdd, 0x8d, 0xd9, 0x6d, 0x7a, 0xf7, 0x15, 0x7c, 0x0b, 0xdf, 0xc3, 0x8b, 0x57, 0x5f, 0xc1, 0x07,
	0x91, 0xdd, 0xad, 0xd0, 0x5a, 0x0f, 0xe2, 0x71, 0xe6, 0x9f, 0xf9, 0xe6, 0xdf, 0x99, 0x85, 0xf6,
	0x92, 0x15, 0x05, 0xaa, 0x39, 0xe3, 0x2c, 0xc5, 0x8a, 0x96, 0x95, 0x50, 0x82, 0xb8, 0x75, 0xe4,
	0x9f, 0xa4, 0x42, 0xa4, 0x05, 0x86, 0xac, 0xcc, 0x43, 0xc6, 0xb9, 0x50, 0x4c, 0xe5, 0x82, 0x4b,
	0x5b, 0xe1, 0xb7, 0x2b, 0x94, 0xa5, 0xe0, 0x12, 0xa5, 0x62, 0x0a, 0x6d, 0x32, 0x18, 0x41, 0x7b,
	0xca, 0x0b, 0x31, 0x7b, 0xbc, 0x31, 0xcc, 0x04, 0x9f, 0x16, 0x28, 0x15, 0xe9, 0x40, 0xc3, 0x0e,
	0xf1, 0x9c, 0x9e, 0xd3, 0xdf, 0x4b, 0x56, 0x11, 0xe9, 0x02, 0x94, 0x4c, 0xca, 0x32, 0xab, 0x98,
	0x44, 0xcf, 0xed, 0x39, 0xfd, 0xfd, 0x64, 0x2d, 0x13, 0x9c, 0x41, 0x6b, 0xf8, 0x57, 0x58, 0x70,
	0x09, 0x87, 0x9b, 0xb3, 0xad, 0x3d, 0x72, 0x0a, 0xbb, 0xc6, 0xa2, 0x29, 0x3f, 0x88, 0x5b, 0xb4,
	0x8e, 0xe8, 0xb7, 0x38, 0xd1, 0x42, 0x62, 0xf5, 0xe0, 0x02, 0xc8, 0xf0, 0xff, 0xed, 0xf1, 0x9b,
	0x03, 0x4d, 0xdb, 0x3b, 0xb2, 0xab, 0x24, 0x77, 0xd0, 0xb0, 0x8e, 0xc8, 0xb1, 0xee, 0xfa, 0x65,
	0x33, 0xbe, 0xb7, 0x2d, 0x58, 0x74, 0xd0, 0x7b, 0xfe, 0xf8, 0x7c, 0x71, 0x7d, 0xe2, 0x85, 0x75,
	0x14, 0x6e, 0x9c, 0x28, 0x5c, 0x58, 0xe8, 0x14, 0x76, 0xb4, 0x5f, 0x72, 0xa4, 0x19, 0x5b, 0x7b,
	0xf2, 0x3b, 0x3f, 0xd3, 0x2b, 0x70, 0xd7, 0x80, 0x3d, 0xd2, 0xd9, 0x06, 0x6b, 0xec, 0xe0, 0x1a,
	0xba, 0x33, 0x31, 0xa7, 0x4b, 0x64, 0xc5, 0x83, 0xc2, 0x59, 0x46, 0x51, 0x65, 0xb1, 0xcc, 0x53,
	0x8e, 0x15, 0x2b, 0x73, 0x5a, 0x47, 0x03, 0xb2, 0xf1, 0xcc, 0xb1, 0xbe, 0xfc, 0xd8, 0x79, 0x75,
	0x9b, 0x57, 0x2a, 0x8b, 0x27, 0xa6, 0x90, 0xd6, 0xd1, 0xfb, 0x7a, 0x7c, 0x5b, 0x47, 0xf7, 0x0d,
	0xf3, 0x45, 0xce, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x97, 0x0b, 0xf0, 0x70, 0x02, 0x00,
	0x00,
}
